using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Reflection;
using Microsoft.AspNet.Scaffolding.Core.Metadata;

namespace Happy.Scaffolding.MVC.Utils
{
    public class MetadataHelper
    {
        private readonly string _assemblyPath;

        public MetadataHelper(string assemblyPath)
        {
            _assemblyPath = assemblyPath;
        }

        public ModelMetadata ToMetadata(string dbContextTypeName)
        {
            var assembly = Assembly.LoadFrom(_assemblyPath);
            var modelMetadata = new ModelMetadata();
            modelMetadata.EntitySetName = dbContextTypeName;

            var contextType = assembly.GetTypes().FirstOrDefault(p => p.Name == dbContextTypeName);

            List<PropertyMetadata> keypropertyMetadatas = new List<PropertyMetadata>();
            List<PropertyMetadata> propertyMetadatas = new List<PropertyMetadata>();
            foreach (var propertyInfo in contextType.GetProperties())
            {
                //key
                if (propertyInfo.CustomAttributes.Any(attr => attr.AttributeType == typeof(KeyAttribute)))
                {
                    var propertyMetadata = CreateKeyMata(propertyInfo);
                    keypropertyMetadatas.Add(propertyMetadata);
                    propertyMetadatas.Add(propertyMetadata);
                }
                else
                {
                    propertyMetadatas.Add(PropertyMetadata(propertyInfo, false));

                }

            }

            modelMetadata.PrimaryKeys = keypropertyMetadatas.ToArray();
            modelMetadata.Properties = propertyMetadatas.ToArray();

            return modelMetadata;
        }

        private static PropertyMetadata CreateKeyMata(PropertyInfo key)
        {
            return PropertyMetadata(key, true);
        }

        private static PropertyMetadata PropertyMetadata(PropertyInfo key, bool isPrimaryKey)
        {
            var type = key.PropertyType.GetType();

            return new PropertyMetadata
            {
                AssociationDirection = AssociationDirection.None,
                DefaultValue = null,
                IsAssociation = false,
                IsAutoGenerated = false,
                IsComplexType = false,
                IsConcurrencyProperty = false,
                IsEnum = false,
                IsEnumFlags = false,
                IsForeignKey = false,
                IsIndependentAssociation = false,
                IsPrimaryKey = isPrimaryKey,
                IsReadOnly = false,
                PropertyName = key.Name,
                RelatedModel = null,
                Scaffold = false,
                ShortTypeName = key.PropertyType.Name,
                TypeName = key.PropertyType.Name
            };
        }
    }
}