<#@ template language="C#" HostSpecific="True" #>
<#@ output extension="cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Linq" #>
<#@ assembly name="System.Runtime" #>
<#@ ScaffoldingAssembly Processor="ScaffoldingAssemblyLoader" #>
<#@ import namespace="Microsoft.AspNet.Scaffolding.Core.Metadata" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ parameter type="System.String" name="ControllerName" #>
<#@ parameter type="System.String" name="ControllerRootName" #>
<#@ parameter type="System.String" name="Namespace" #>
<#@ parameter type="System.String" name="ContextTypeName" #>
<#@ parameter type="System.String" name="ModelTypeName" #>
<#@ parameter type="System.String" name="ModelVariable" #>
<#@ parameter type="Microsoft.AspNet.Scaffolding.Core.Metadata.ModelMetadata" name="ModelMetadata" #>
<#@ parameter type="System.Boolean" name="UseAsync" #>
<#@ parameter type="System.Collections.Generic.HashSet<System.String>" name="RequiredNamespaces" #>
<#
string routePrefix = "api/" + ControllerRootName;
#>
using AutoMapper;
using DAL.Core;
using DAL.Project.Model;
using DAL.Project.Repository;
using WebApp.AppCode.Core;
using WebApp.AppCode.Project.ViewModel;
using WebApp.AppCode.Sys.Service.Base;
using WebApp.AppCode.Sys.Service.Dto;
using WebApp.Controllers.Project;

namespace WebApp.AppCode.Project.Service
{
<#
    var entitySetName = ModelMetadata.EntitySetName;
    var primaryKeyName = ModelMetadata.PrimaryKeys[0].PropertyName;
    var primaryKeyShortTypeName = ModelMetadata.PrimaryKeys[0].ShortTypeName;
    var primaryKeyDefaultValue = ModelMetadata.PrimaryKeys[0].DefaultValue;
    var primaryKeyType = ModelMetadata.PrimaryKeys[0].TypeName;
    var primaryKeyIsAutoGenerated = ModelMetadata.PrimaryKeys[0].IsAutoGenerated;

    var controllerNameOnly  = ControllerName.Replace("Api","").Replace("Controller","");
    
    var entifyName= entitySetName.TrimEnd('s');
    var serviceName =  controllerNameOnly + "Service";
    var iserviceName = "I"+ controllerNameOnly + "Service";
    var serviceFieldName = "_"+ FirstCharLower(controllerNameOnly) +"Service";
    var viewMoel= controllerNameOnly + "ListViewModel";
    var editViewMoel= controllerNameOnly + "EditViewModel";
    var queryDto = "Query" + controllerNameOnly + "Dto";
           
    var repos =  "_"+ FirstCharLower(entitySetName)+"Repos";

    var iReposName = "I" + entifyName+ "Repos";

     string FirstCharLower(string original)
     {
            if (original.Length > 0)
            {
                return string.Format("{0}{1}", original.Substring(0, 1).ToLower(),
                original.Substring(1, original.Length - 1));
            }

            return original;
    }
#>

     
    public interface <#= iserviceName #> : ICrudService<<#= queryDto #>, <#= viewMoel #>, <#= editViewMoel #>>
    {
    }
    
    public class <#=serviceName#> : BaseService, <#= iserviceName #>
    {
        private readonly I<#= entifyName #>Repos <#=repos#>;

        public <#=serviceName#>(IUnitOfWork db, IMapper mapper) : base(db, mapper)
        {
            <#=repos#> = _db.CreateRepos<I<#= entifyName #>Repos,<#= entifyName #>Repos>();
        }

        #region <#= iserviceName #> Members

        public ResponseListDto<<#= viewMoel #>> SelectDataModel(<#= queryDto #> query)
        {
            MappingCustomSortBy<<#= viewMoel #>>(query);

            var queryResult = <#= repos #>.ListQuery(query);

            return ResponseList<<#= viewMoel #>,<#= entifyName #>>(queryResult);
        }

        public <#= editViewMoel #> GetViewModel(int id)
        {
            if (id == 0)
                return new <#= editViewMoel #>();

            var entity = <#=repos#>.FindEdit(id);
            return _mapper.Map<<#= editViewMoel #>>(entity);
        }

        public int CreateFormViewModel(<#= editViewMoel #> model)
        {
            var entity = _mapper.Map<<#= entifyName #>>(model);
            <#=repos#>.Create(entity);
            _db.Save();
            return entity.<#= primaryKeyName #>;
        }

        public <#= editViewMoel #> EditFormViewModel(<#= editViewMoel #> model)
        {
            var entity = _mapper.Map<<#= entifyName #>>(model);

            <#=repos#>.Update(entity);
            _db.Save();
            return model;

        }

        public void Delete(int id)
        {
            var entity = <#= repos #>.Find(id);
            <#= repos #>.Delete(entity);
            _db.Save();
        }

        #endregion
    }



}