<#@ template language="C#" HostSpecific="True" #>
<#@ output extension="cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Linq" #>
<#@ assembly name="System.Runtime" #>
<#@ ScaffoldingAssembly Processor="ScaffoldingAssemblyLoader" #>
<#@ import namespace="Microsoft.AspNet.Scaffolding.Core.Metadata" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ parameter type="System.String" name="ControllerName" #>
<#@ parameter type="System.String" name="ControllerRootName" #>
<#@ parameter type="System.String" name="Namespace" #>
<#@ parameter type="System.String" name="ContextTypeName" #>
<#@ parameter type="System.String" name="ModelTypeName" #>
<#@ parameter type="System.String" name="ModelVariable" #>
<#@ parameter type="Microsoft.AspNet.Scaffolding.Core.Metadata.ModelMetadata" name="ModelMetadata" #>
<#@ parameter type="System.Boolean" name="UseAsync" #>
<#@ parameter type="System.Collections.Generic.HashSet<System.String>" name="RequiredNamespaces" #>
<#
string routePrefix = "api/" + ControllerRootName;
#>
using System.Linq;
using DAL.Core;
using DAL.Core.Dto;
using System.Data.Entity;
using DAL.Project.Model;

namespace DAL.Project.Repository
{
<#
    var entitySetName = ModelMetadata.EntitySetName;
    var primaryKeyName = ModelMetadata.PrimaryKeys[0].PropertyName;
    var primaryKeyShortTypeName = ModelMetadata.PrimaryKeys[0].ShortTypeName;
    var primaryKeyDefaultValue = ModelMetadata.PrimaryKeys[0].DefaultValue;
    var primaryKeyType = ModelMetadata.PrimaryKeys[0].TypeName;
    var primaryKeyIsAutoGenerated = ModelMetadata.PrimaryKeys[0].IsAutoGenerated;

    var controllerNameOnly  = ControllerName.Replace("Api","").Replace("Controller","");
    
    var entifyName= entitySetName.TrimEnd('s');
    var serviceName =  controllerNameOnly + "Service";
    var iserviceName = "I"+ controllerNameOnly + "Service";
    var serviceFieldName = "_"+ FirstCharLower(controllerNameOnly) +"Service";
    var viewMoel= controllerNameOnly + "ListViewModel";
    var editViewMoel= controllerNameOnly + "EditViewModel";
    var queryDto = "Query" + controllerNameOnly + "Dto";
           
    var repos =  "_"+ FirstCharLower(entitySetName)+"Repos";

    var iReposName = "I" + entifyName+ "Repos";

     string FirstCharLower(string original)
     {
            if (original.Length > 0)
            {
                return string.Format("{0}{1}", original.Substring(0, 1).ToLower(),
                original.Substring(1, original.Length - 1));
            }

            return original;
    }
#>

    public interface <#= iReposName #>:IRepository<<#= entifyName #>>
    {
        ListQueryResultDto<<#= entifyName #>> ListQuery(<#= queryDto #> query);
        <#= entifyName #> FindEdit(int id);
    }


    public class <#= entifyName #>Repos :DbRepository<<#= entifyName #>>, <#= iReposName #>
    {
        public <#= entifyName #>Repos(IDbContextFactory factory) : base(factory)
        {
        }

        public ListQueryResultDto<<#= entifyName #>> ListQuery(<#= queryDto #> query)
        {
            var queryable = DbSet.AsQueryable();
            
            
            queryable = queryable.OrderByDescending(p => p.<#= primaryKeyName #>);
            
            return QueryPagingResult(query, queryable);

        }

        public <#= entifyName #> FindEdit(int id)
        {
            return DbSet.Find(id); 
        }


    }

    public class <#= queryDto #> : PagingSortDto
    {
    }


}